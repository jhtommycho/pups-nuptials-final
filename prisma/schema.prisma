// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(cuid())
  email     String       @unique
  username  String       @unique
  clerkId   String       @unique
  userRole  userRoleType @default(client)
  name      String?
  image     String?
  location  String?
  createdAt DateTime     @default(now()) // member since 2020
  updatedAt DateTime     @updatedAt

  // Relations

  Service      Service[]
  Comment      Comment[]
  Dog          Dog[]
  Notification Notification[]
}

enum userRoleType {
  manager
  client
}

model Service {
  id                   String        @id @default(cuid())
  stage                serviceStage  @default(InquiryReceived)
  marketing            marketingType
  userId               String
  dogCount             Int
  brideName            String
  groomName            String
  weddingDate          String
  serviceLength        String
  servicePackage       String?
  houseSitting         Boolean       @default(false)
  weddingCity          String
  weddingAddress       String
  houseSittingLocation String?
  content              String
  status               ServiceStatus @default(pending)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment      Comment[]
  Dog          Dog[]
  Notification Notification[]
}

enum serviceStage {
  InquiryReceived
  ReviewInProgress
  QuotePreparation
  ContractReview
  FinalConfirmation
  Booked
}

enum ServiceStatus {
  approved
  rejected
  pending
}

enum marketingType {
  FACEBOOK
  INSTAGRAM
  GOOGLE
  TIKTOK
  EMAIL
  WORD_OF_MOUTH
  OTHER
}

model Dog {
  id        String   @id @default(cuid())
  userId    String
  serviceId String
  dogName   String
  dogAge    String
  dogBreed  String
  dogWeight String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  serviceId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  serviceId String
  userId    String
  type      NotificationType
  content   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  NEW_REQUEST
  NEW_COMMENT
}

model Header {
  id    String @id @default(cuid())
  title String
  image String
}

model Discovery {
  id          String @id @default(cuid())
  year        String
  title       String
  description String
  achievement String
  image       String
}

model Feature {
  id          String @id @default(cuid())
  title       String
  description String
  image       String
}

model Testimonials {
  id          String @id @default(cuid())
  client      String
  description String
  image       String
}

model Package {
  id          String  @id @default(cuid())
  title       String
  description String
  price       Int
  favorite    Boolean @default(false)

  // Relations
  PackageFeatures PackageFeatures[]
}

model PackageFeatures {
  id        String @id @default(cuid())
  content   String
  packageId String

  // Relations

  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
}
